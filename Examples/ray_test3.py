#
# Name :
#   ray_test3.m
#
# Purpose :
#   Example of using the spherical Earth 2D NRT raytrace_2d_sp for a fan of
#   rays. Ray trajectories are plotted over the ionosphere which has been
#   generated by IRI 2016. 
#
# Calling sequence :
#   ray_test3
#
# Inputs :
#   None
#
# Outputs :
#   None
#
# Change log:
#   V1.0  M.A. Cervera  09/06/2016
#      Based on V1.5 of raytrace_2d
#
import numpy as np  # py
import time
import ctypes as c


from pylap.raytrace_2d import raytrace_2d
from Ionosphere import gen_iono_grid_2d as gen_iono
from Plotting import plot_ray_iono_slice as plot_iono

#import raytrace_2d as raytrace
import matplotlib.pyplot as plt

plt.switch_backend('tkagg')

#
# setup general stuff
#
UT = [2001, 3, 15, 7, 0]        # UT - year, month, day, hour, minute
R12 = 100                   # R12 index
speed_of_light = 2.99792458e8
radius_earth = 6376.0

#elevs = [2:2:60]             #M initial ray elevation
elevs = np.arange(2, 62, 2, dtype = float) # py
num_elevs = len(elevs)
freq = 10.0                 # frequency (MHz)
# freqs = freq.*ones(size(elevs))
freqs = freq * np.ones(num_elevs, dtype = float) # py
ray_bear = 324.7            # bearing of rays
origin_lat = -23.5          # latitude of the start point of rays
origin_long = 133.7         # longitude of the start point of rays
tol = [1e-7, 0.01, 10]         # ODE tolerance and min/max step sizes
nhops = 1                   # number of hops to raytrace
doppler_flag = 1            # generate ionosphere 5 minutes later so that
                             # Doppler shift can be calculated
irregs_flag = 0             # no irregularities - not interested in 
                             # Doppler spread or field aligned irregularities
kp = 0                      # kp not used as irregs_flag = 0. Set it to a 
                             # dummy value 

print( ['\n' \
  'Example of 2D numerical raytracing for a fan of rays for a spherical' \
  ' Earth\n'])
print('Earth radius used is #f km\n\n', radius_earth)

#
# generate ionospheric, geomagnetic and irregularity grids
#
max_range = 10000      # maximum range for sampling the ionosphere (km)
num_range = 201        # number of ranges (must be < 2000)
range_inc = max_range / (num_range - 1)  # range cell size (km)

start_height = 0       # start height for ionospheric grid (km)
height_inc = 3         # height increment (km)
num_heights = 200      # number of  heights (must be < 2000)

# clear iri_options
# iri_options.Ne_B0B1_model = 'Bil-2000' # this is a non-standard setting for 
                                        # IRI but is used as an example
# implement the above by means of dictionay
iri_options = {
               'Ne_B0B1_model': 'Bil-2000'
              } 					
print('Generating ionospheric grid... ')

[iono_pf_grid, iono_pf_grid_5, collision_freq, irreg, iono_te_grid] = \
    gen_iono.gen_iono_grid_2d(origin_lat, origin_long, R12, UT, ray_bear, \
                     max_range, num_range, range_inc, start_height, \
		     height_inc, num_heights, kp, doppler_flag, 'iri2016', \
		     iri_options)

 

# convert plasma frequency grid to  electron density in electrons/cm^3
iono_en_grid = iono_pf_grid**2 / 80.6164e-6
iono_en_grid_5 = iono_pf_grid_5**2 / 80.6164e-6


#
# Example 1 - Fan of rays, 10 MHz, single hop. Print to encapsulated
# postscript and PNG. Note the transition from E-low to E-High to F2-low modes.
#

# call raytrace for a fan of rays
# first call to raytrace so pass in the ionospheric and geomagnetic grids 

print('Generating {} 2D NRT rays ...'.format(num_elevs))
[ray_data, ray_path_data, ray_path_state] = \
    raytrace_2d(origin_lat, origin_long, elevs, ray_bear, freqs, nhops, tol,
             irregs_flag, iono_en_grid, iono_en_grid_5,
	     collision_freq, start_height, height_inc, range_inc, irreg)

	 
# plot the rays and ionosphere

start_range = 0
start_range_idx = int(start_range/range_inc) 
end_range = 2000
end_range_idx = int((end_range) / range_inc) + 1
start_ht = start_height
start_ht_idx = 0
end_ht = 250
end_ht_idx = int(end_ht / height_inc) + 1
iono_pf_subgrid = iono_pf_grid[start_ht_idx:end_ht_idx, start_range_idx:end_range_idx]

ax, ray_handle = plot_iono.plot_ray_iono_slice(iono_pf_subgrid, start_range, end_range, range_inc, 
    start_ht, end_ht, height_inc, ray_path_data, linewidth=1.5, color=[1, 1, 0.99])

fig_str_a = '{}/{}/{}  {:02d}:{:02d}UT   {}MHz   R12 = {}'.format(
              UT[1], UT[2], UT[0], UT[3], UT[4], freq, R12)
fig_str_b = '   lat = {}, lon = {}, bearing = {}'.format(
             origin_lat, origin_long, ray_bear)

fig_str = fig_str_a + fig_str_b

ax.set_title(fig_str)


#
# Example 2 - Fan of rays, 3 hops, 30 MHz
#

# call raytrace
nhops = 3           # number of hops
freqs = 30 *np.ones(elevs.size)
[ray_data, ray_path_data, ray_path_state] = \
    raytrace_2d(origin_lat, origin_long, elevs, ray_bear, freqs, nhops, tol, irregs_flag)
       
# plot the rays

start_range = 0
start_range_idx = int(start_range / range_inc)
end_range = 7000
end_range_idx = int(end_range / range_inc) + 1
start_ht = start_height
start_ht_idx = 0
end_ht = 597
end_ht_idx = int(end_ht / height_inc) + 1
iono_pf_subgrid = iono_pf_grid[start_ht_idx:end_ht_idx, start_range_idx:end_range_idx]
ax2, ray_handle2 = plot_iono.plot_ray_iono_slice(iono_pf_subgrid, start_range, end_range, range_inc, \
    start_ht, end_ht, height_inc, ray_path_data, linewidth=1.5, color='w')


freq = freqs[0]
fig_str_a = '{}/{}/{}  {:02d}:{:02d}UT   {}MHz   R12 = {}'.format(
              UT[2], UT[1], UT[0], UT[3], UT[4], freq, R12)
fig_str_b = '   lat = {}, lon = {}, bearing = {}'.format(
             origin_lat, origin_long, ray_bear)
fig_str = fig_str_a + fig_str_b
ax2.set_title(fig_str)



# # plot three rays only

iono_pf_subgrid = iono_pf_grid[start_ht_idx:end_ht_idx,start_range_idx:end_range_idx]
ax3, ray_handle3 = plot_iono.plot_ray_iono_slice(iono_pf_subgrid, start_range,
                    end_range, range_inc, start_ht, end_ht, height_inc,
                    ray_path_data[0:3],linewidth=1.5, color='w')
ray_handle3[0][0].set_linestyle('--')
ray_handle3[1][0].set_linestyle(':')
ax3.set_title(fig_str)

print('\n')
plt.show()